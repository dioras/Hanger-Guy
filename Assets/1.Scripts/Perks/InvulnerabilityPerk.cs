using System.Linq;
using UnityEngine;
using _1.Scripts.Champion;
using _1.Scripts.Level;
using _1.Scripts.Skins;

namespace _1.Scripts.Perks
{
	[RequireComponent(typeof(ChampionHealth))]
	public class InvulnerabilityPerk: Perk
	{
		private ChampionHealth championHealth;
		
		
		
	
		protected override void Awake()
		{
			base.Awake();

			this.championHealth = GetComponent<ChampionHealth>();
		}
		
		private void OnTriggerEnter(Collider other)
		{
			if (!IsActive)
			{
				return;
			}
			
			if (other.transform.TryGetComponent<LevelObstacle>(out _))
			{
				var breakable = other.transform.GetComponentInChildren<Breakable>();

				if (breakable != null)
				{
					breakable.Break(Vector3.forward * 10f);
				}
			}
		}



		public override void Activate()
		{
			if (IsActive)
			{
				return;
			}

			IsActive = true;

			var breakables = FindObjectsOfType<Breakable>();

			foreach (var breakable in breakables)
			{
				breakable.GetComponentInParent<Collider>().isTrigger = true;
			}

			this.championHealth.IsInvulnerable = true;
		}

		public override void Stop()
		{
			if (!IsActive)
			{
				return;
			}

			IsActive = false;
			
			var breakables = FindObjectsOfType<Breakable>();

			foreach (var breakable in breakables)
			{
				breakable.GetComponentInParent<Collider>().isTrigger = false;
			}
		
			this.championHealth.IsInvulnerable = false;
		}
	}
}